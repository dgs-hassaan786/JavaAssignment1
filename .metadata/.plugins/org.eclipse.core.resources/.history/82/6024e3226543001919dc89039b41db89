package io.bus.syncer;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class Stations extends Thread {
	int stationNumber;
	int passengerArrivingDelay;
	BlockingQueue<Passenger> passengers;
	private Bus bus;
	volatile boolean keepProcessing;

	public Stations(int sn, int pad, Bus bus, boolean keepProcessing){
		stationNumber = sn;
		passengerArrivingDelay = pad;
		passengers = new ArrayBlockingQueue<Passenger>(1024);
		this.bus = bus;
		this.keepProcessing = keepProcessing; 
	}	

	public synchronized int getWaitingPassenger(){
		return passengers.size();
	}

	public synchronized void onBoardOnBus(int passengerCount){
		int i = 0;
		for (i = 0; i < passengerCount; i++) {
			//first we are checking whether we have any queued passenger at the station
			if(passengers.size() > 0){				
				//if we have passenger waiting for onboarding on the bus 
				//we are then checking whether the bus is already overloaded or not
				if(bus.getPassengerCount() < bus.getMaxPassengerAllowed()){				
					Passenger p;
					try {
						p = passengers.take();
						bus.onBoard(p);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else{
					//Bus is overloaded					
					System.out.println("No more space available in the bus, wait for the next round.....");
					break;
				}
			}else{
				System.out.println("No Passenger to onboard from station: " + stationNumber);
				break;
			}
		}

		if(i > 0 ){
			System.out.println("Total Passenger(s) "+ passengerCount + " onboarder from station " + stationNumber);
		}

	}

	public synchronized void leaveFromBus(int passengerCount){
		int i = 0;
		for (i = 0; i < passengerCount; i++) {
			if(bus.getPassengerCount() > 0){
				bus.leave(stationNumber - 1);				
			}else{
				System.out.println("No Passenger to departure at station: " + stationNumber);
				break;
			}
		}

		if(i > 0 ){
			System.out.println("Total Passenger(s) "+ passengerCount + " left bus at station " + stationNumber);
		}

	}

	public void shutdown(){
		this.keepProcessing = false;
	}

	@Override
	public void run() {

		while(keepProcessing){
			//first waiting for the delay arrival time of passenger
			try {
				Thread.sleep(passengerArrivingDelay);
			} catch (InterruptedException e) {			
				e.printStackTrace();
			}

			//generating the random station;
			int randomPassenger = (int)(Math.random()*45);

			//System.out.println("Total " + randomPassenger + " arrived at station: " + stationNumber);		

			for (int i = 0; i < randomPassenger; i++) {
				int randomDepartureStation = (int)(Math.random()*6) + 1;
				if(randomDepartureStation == stationNumber){
					if(randomDepartureStation == 6)
						randomDepartureStation = 1;
					else if(randomDepartureStation == 1) {
						randomDepartureStation += 2;
					}
				}

				//simulating the scenario of passenger coming to station
				Passenger p = new Passenger(stationNumber, randomDepartureStation);
				passengers.add(p);
			}
		}
	}
	

}
