package io.bus.syncer;

public class BusStationServiceProvider implements Runnable {

	private boolean keepProcessing;
	private Thread[] stations;

	public BusStationServiceProvider(Thread[] stations, boolean keepProcessing){
		this.stations = stations;
		this.keepProcessing = keepProcessing;
	}
	
	
	public void shutdown(){
		this.keepProcessing = false;
	}
	
	@Override
	public void run() {
		int n = 0;
		while(keepProcessing){
			if(n ==6 )
				n= 0;
			
			System.out.println("Bus is at station: " + (n+1));
								
			try {
				Thread.sleep(3500);
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			}
								
			
			Stations st = (Stations)stations[n];
			//we are first departing the  
			st.leaveFromBus(getRandomNumber(50, 0));
			
			st.onBoardOnBus(getRandomNumber(50, 0));		
			
			System.out.println("Bus Moving to next station");
			
			n++;
			
		}

	}
		
	private static int getRandomNumber(int upperBound, int lowerBound){
		return	lowerBound + (int)(Math.random() * ((upperBound - lowerBound) + 1));
	}
}
